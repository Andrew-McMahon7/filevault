name: Terraform Build

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  docker-build-push:
    uses: ./.github/workflows/docker.yml
    secrets:
      SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      AWS_ECR_ROLE_ARN: ${{ secrets.AWS_ECR_ROLE_ARN }}
      AWS_REGION: ${{ secrets.AWS_REGION }}
      AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}

  terraform:
    needs:
      - docker-build-push

    runs-on: ubuntu-latest

    permissions:
      id-token: write
      contents: read

    defaults:
      run:
        working-directory: ./terraform

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.9.5

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          audience: sts.amazonaws.com
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: eu-west-2

      - name: Extract branch name
        shell: bash
        run: echo "branch=${GITHUB_HEAD_REF:-${GITHUB_REF#refs/heads/}}" >> $GITHUB_OUTPUT
        id: extract_branch

      - name: Set workspace name
        id: workspace
        run: |
          if [ "${{ steps.extract_branch.outputs.branch }}" == "main" ]; then
            echo "workspace=filevault-prod" >> $GITHUB_ENV
            echo "IMAGE_TAG=latest" >> $GITHUB_ENV
          else
            echo "workspace=filevault-pr-${{ github.event.number }}" >> $GITHUB_ENV
            echo "IMAGE_TAG=pr-${{ github.event.number }}" >> $GITHUB_ENV
          fi

      - name: Set DynamoDB table name
        run: echo "DYNAMO_DB_TABLE=DynamoDB-Terraform-${{ env.workspace }}" >> $GITHUB_ENV

      - name: Set S3 bucket name
        run: echo "S3_BUCKET_NAME=andrewwocbucket-${{ env.workspace }}" >> $GITHUB_ENV

      - name: Export secrets to environment variables
        run: |
          echo "BUCKET_AWS_ACCESS_KEY_ID=${{ secrets.BUCKET_AWS_ACCESS_KEY_ID }}" >> $GITHUB_ENV
          echo "BUCKET_AWS_SECRET_ACCESS_KEY=${{ secrets.BUCKET_AWS_SECRET_ACCESS_KEY }}" >> $GITHUB_ENV
          echo "AWS_REGION=${{ secrets.AWS_REGION }}" >> $GITHUB_ENV
          echo "PORT=${{ secrets.PORT }}" >> $GITHUB_ENV

      - name: Initialize Terraform
        run: terraform init

      - name: Create or select Terraform workspace
        run: |
          terraform workspace new ${{ env.workspace }} || terraform workspace select ${{ env.workspace }}

      - name: Plan Terraform configuration
        run: |
          terraform plan

      - name: Apply Terraform configuration
        run: terraform apply -auto-approve

      - name: Update kube config
        run: aws eks update-kubeconfig --name "filevault-eks-${{ env.workspace }}" --region eu-west-2

      - name: Update aws-auth ConfigMap
        run: kubectl apply -f k8s/aws-auth-configmap.yaml
        working-directory: ./

      - name: Apply Kubernetes configuration
        run: envsubst < k8s/deployment.yaml | kubectl apply -f -
        working-directory: ./

      - name: Apply Kube Load Balancer
        run: kubectl apply -f k8s/public-lb.yaml
        working-directory: ./

      - name: Install CloudWatch Agent and Fluent Bit
        run: |
          kubectl apply -f https://raw.githubusercontent.com/aws-samples/amazon-cloudwatch-container-insights/main/k8s-deployment-manifest-templates/cwagent-fluent-bit-quickstart.yaml

      - name: Create CloudWatch Agent ConfigMap
        run: |
          kubectl create configmap cwagentconfig --from-file=k8s/cwagent-config.json -n amazon-cloudwatch
          kubectl apply -f https://raw.githubusercontent.com/aws-samples/amazon-cloudwatch-container-insights/main/k8s-deployment-manifest-templates/cwagent-fluent-bit-quickstart.yaml

      - name: Patch Deployment to force re-deploy
        run: |
          kubectl patch deployment filevault -p \
            "{\"spec\":{\"template\":{\"metadata\":{\"annotations\":{\"kubectl.kubernetes.io/restartedAt\":\"$(date +%Y-%m-%dT%H:%M:%S%z)\"}}}}}"
        working-directory: ./

#      - name: Delete Load Balancer
#        run: kubectl delete -f k8s/public-lb.yaml
#        working-directory: ./
#
#      - name: Delete Deployment
#        run: kubectl delete -f k8s/deployment.yaml
#        working-directory: ./
#
#      - name: Destroy Terraform configuration
#        run: terraform destroy -auto-approve