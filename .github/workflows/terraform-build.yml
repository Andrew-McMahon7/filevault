name: Terraform Build

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  soncarcloud:
    uses: ./.github/workflows/sonarscan.yml
    secrets:
      SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  build-NodeJS:
    uses: ./.github/workflows/node.js.yml

  terraform:
    needs:
      - build-NodeJS
      - soncarcloud

    runs-on: ubuntu-latest

    permissions:
      id-token: write
      contents: read

    defaults:
      run:
        working-directory: ./terraform

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.9.5

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          audience: sts.amazonaws.com
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: eu-west-2

      - name: Extract branch name
        shell: bash
        run: echo "branch=${GITHUB_HEAD_REF:-${GITHUB_REF#refs/heads/}}" >> $GITHUB_OUTPUT
        id: extract_branch

      - name: Set workspace name
        id: workspace
        run: |
          if [ "${{ steps.extract_branch.outputs.branch }}" == "master" ]; then
            echo "workspace=filevault-prod" >> $GITHUB_ENV
          else
            echo "workspace=filevault-pr-${{ github.event.number }}" >> $GITHUB_ENV
          fi

      - name: Initialize Terraform
        run: terraform init

      - name: Create or select Terraform workspace
        run: |
          terraform workspace new ${{ env.workspace }} || terraform workspace select ${{ env.workspace }}

      - name: Plan Terraform configuration
        run: |
          terraform plan

      - name: Apply Terraform configuration
        run: terraform apply -auto-approve

      - name: Update kube config
        run: aws eks update-kubeconfig --name ${{ env.workspace }} --region eu-west-2

      - name: Get Pods in the cluster
        run: kubectl get pods


#      - name: Destroy Terraform configuration
#        run: terraform destroy -auto-approve